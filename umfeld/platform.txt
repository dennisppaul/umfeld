###################################################################################################
# 
# UMFELD
#
# see https://arduino.github.io/arduino-cli/latest/platform-specification/
# 
###################################################################################################

name=Umfeld
version=2.2.1

###################################################################################################
#
# COMPILE
#
###################################################################################################

recipe.hooks.prebuild.01.pattern=echo "Umfeld: " {build.flags.board}
#recipe.hooks.prebuild.02.pattern=sh "{runtime.platform.path}/extras/check-for-tools.sh"
# try to retreive system information with env variable e.g: `compiler.c.flags=-DVAR_FROM_ENVIRONMENT="{ENV_VAR_NAME}"`

# research: set environment variables from with `platform.txt`
# a. Preprocess information into environment variables before calling arduino-cli compile:
# ```sh
# #!/bin/bash
# 
# MYINFO=$(./retrieve-info.sh)
# export MYINFO
# 
# arduino-cli compile --build-path ./build ...
# ```
# platform.txt: `compiler.cpp.flags=-DINFO_FROM_SCRIPT="{MYINFO}"`
#
# b. OR: Write your info to a known file and read that via a custom wrapper:
# ```sh
# #!/bin/sh
# echo "#define MYINFO \"$VALUE\"" > generated_info.h
# ```
# platform.txt: `compiler.cpp.extra_flags=-include{build.path}/generated_info.h`


# TODO this should be configured according for each system … maybe with a script? see above ^^^
compiler.path.macosx            = /usr/bin/
compiler.path.linux             = /usr/bin/
compiler.umf_define             = -DUMF_ENV={build.flags.board} -DOPENGL_3_3_CORE -DSYSTEM_MACOS
# TODO this is now fixed to macOS and OpenGL 3.3 core

compiler.umfeld_flags=-I{runtime.platform.path}/cores/sdl3 -I{runtime.platform.path}/cores/sdl3/umfeld/include -I{runtime.platform.path}/cores/sdl3/umfeld/include/libraries -I{runtime.platform.path}/cores/sdl3/umfeld/include/libraries/clipper2 -I{runtime.platform.path}/cores/sdl3/umfeld/include/libraries/dr_libs -I{runtime.platform.path}/cores/sdl3/umfeld/include/libraries/ip -I{runtime.platform.path}/cores/sdl3/umfeld/include/libraries/libtess2 -I{runtime.platform.path}/cores/sdl3/umfeld/include/libraries/osc -I{runtime.platform.path}/cores/sdl3/umfeld/include/libraries/pffft -I{runtime.platform.path}/cores/sdl3/umfeld/include/shaders -I{runtime.platform.path}/cores/sdl3/umfeld/external/glad_opengl_33/include -I{runtime.platform.path}/cores/sdl3/umfeld/external/glad_opengl_33/src -DDISABLE_VIDEO -DENABLE_PORTAUDIO 
compiler.umfeld_libs.macosx   = -L/opt/homebrew/lib -framework OpenGL -lGLEW -lharfbuzz -lfreetype -lportaudio -lcurl
compiler.umfeld_libs.linux    = -L/usr/lib -L/usr/local/lib -lGL -lGLEW -lharfbuzz -lfreetype -lportaudio -lcurl
# TODO remove reference to curl … it is not setup properly and should be replaced by leightweight HTTP library

# TODO improve
# 1. add windows paths
# 2. introduce `umfeld_libs_includes`
# 3. separate general path e.g `/opt/homebrew/include` from actual library e.g `rtmidi`

compiler.SDL3_cflags.macosx     = -I/opt/homebrew/include/ -I/opt/homebrew/include/SDL3 -I/opt/homebrew/include/rtmidi/ -I/opt/homebrew/include/freetype2/ -D_THREAD_SAFE -DGLM_ENABLE_EXPERIMENTAL -DSDL_MAIN_USE_CALLBACKS
compiler.SDL3_cflags.linux      = -I/usr/include/ -I/usr/include/SDL3 -I/usr/include/rtmidi/ -I/usr/include/freetype2/ -D_THREAD_SAFE -DGLM_ENABLE_EXPERIMENTAL -DSDL_MAIN_USE_CALLBACKS
compiler.SDL3_cflags.windows    = # TODO add windows paths

compiler.SDL3_libs.macosx       = -L/opt/homebrew/lib -lSDL3
compiler.SDL3_libs.linux        = -L/usr/lib -lSDL3
compiler.SDL3_libs.windows      = # TODO add windows paths

compiler.c.cmd                  = gcc
compiler.c.std                  = c17
compiler.c.flags.macosx         = -c -Wall -std={compiler.c.std} {compiler.umf_define}
compiler.c.flags.linux          = -c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.umf_define}
compiler.c.flags.windows        =
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}" -o "{object_file}"

compiler.cpp.cmd=g++
compiler.cpp.std=c++17
compiler.cpp.flags.macosx= -c -Wall -std={compiler.cpp.std} -pthread {compiler.umf_define}
compiler.cpp.flags.linux=  -c -g -MMD -Wall -flto -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.umf_define}
compiler.cpp.flags.windows=
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}" -o "{object_file}"

###################################################################################################
#
# ARCHIVE
#
###################################################################################################

compiler.ar.cmd=ar
compiler.ar.flags=-rcs
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

###################################################################################################
#
# COMBINE/LINK
#
###################################################################################################

compiler.c.linker.cmd=g++
compiler.ldflags=-v
recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.ldflags} -o "{build.path}/{build.project_name}.exec" {object_files} {archive_file_path} {compiler.umfeld_libs} {compiler.SDL3_libs} -lm

# copy run script to `/tmp/` ( or similar )
# compiler.execpath=sketch-exec
# compiler.copy.macosx={compiler.execpath}/copy-sketch-exec.macos.sh
# compiler.copy.linux={compiler.execpath}/copy-sketch-exec.linux.sh
# compiler.copy.windows=
# compiler.exec.macosx={compiler.execpath}/sketch-exec.sh
# compiler.exec.linux={compiler.execpath}/sketch-exec.sh
# compiler.exec.windows=
#recipe.hooks.linking.postlink.1.pattern="{build.core.path}/../../{compiler.copy}" "{build.core.path}/../../{compiler.exec}"

###################################################################################################
#
# PREPROCESS
#
###################################################################################################

preproc.includes.cmd.macosx=g++
preproc.includes.cmd.linux=g++
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes="{compiler.path}{preproc.includes.cmd}" {compiler.cpp.flags} {preproc.includes.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}"

preproc.macros.cmd.macosx=g++
preproc.macros.cmd.linux=g++
preproc.macros.flags=-w -x c++ -E -CC
recipe.preproc.macros="{compiler.path}{preproc.macros.cmd}" {compiler.cpp.flags} {preproc.macros.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL3_cflags} {compiler.umfeld_flags} "{source_file}" -o "{preprocessed_file_path}"

###################################################################################################
#
# UPLOAD
#
###################################################################################################

# run sketch via script ( this prevents the sketch from being shut down by Arduino )
# tools.sdlexecprog.exec.macosx={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.linux={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.windows=
# TODO problem with dialog box quitting 
# cannot use the upload script when also using the dialog box with e.g `Card.begin()`
tools.sdlexecprog.upload.pattern="{build.path}/{build.project_name}.exec" {upload.options} --fontpath={runtime.platform.path}/fonts/
tools.sdlexecprog.upload.params.verbose=
tools.sdlexecprog.upload.params.quiet=

recipe.hooks.postbuild.01.pattern=printf "\n\nexecutable binary located at: {build.path}/{build.project_name}.exec \n\n"
# recipe.hooks.postbuild.02.pattern={build.path}/{build.project_name}.exec

###################################################################################################
#
# CLI
#
###################################################################################################

# sketches can also be compiled and run from CLI e.g:
# 
# arduino-cli compile -v -u -b umfeld-arduino:umfeld:UMFELD ./umfeld/examples/test
