###################################################################################################
# 
# UMGEBUNG
#
# see https://arduino.github.io/arduino-cli/latest/platform-specification/
# 
###################################################################################################

name=Umgebung
version=0.0.1

###################################################################################################
#
# COMPILE
#
###################################################################################################

recipe.hooks.prebuild.01.pattern=echo "UMG: " {build.flags.board}
#recipe.hooks.prebuild.02.pattern=sh "{runtime.platform.path}/extras/check-for-tools.sh"

# TODO this should be configured according for each system â€¦ maybe with a script?
compiler.path.macosx=/usr/bin/
compiler.path.linux=/usr/bin/
compiler.klst_define=-DKLST_ENV={build.flags.board}

compiler.umgebung_flags=-I{runtime.platform.path}/cores/sdl3 -I{runtime.platform.path}/cores/sdl3/umgebung/include -I{runtime.platform.path}/cores/sdl3/umgebung/include/libraries -I{runtime.platform.path}/cores/sdl3/umgebung/include/libraries/ip -I{runtime.platform.path}/cores/sdl3/umgebung/include/libraries/osc -I{runtime.platform.path}/cores/sdl3/umgebung/include/shaders -DDISABLE_VIDEO
compiler.umgebung_libs=-L/opt/homebrew/lib -L/usr/local/lib -framework OpenGL -lGLEW -lharfbuzz -lfreetype

compiler.SDL3_cflags.macosx=-I/opt/homebrew/include/SDL3 -I/opt/homebrew/include/ -I/opt/homebrew/include/freetype2/ -I/usr/local/include/SDL3 -I/usr/local/include/ -I/usr/local/include/freetype2/ -D_THREAD_SAFE -DGLM_ENABLE_EXPERIMENTAL -DSDL_MAIN_USE_CALLBACKS
compiler.SDL3_cflags.linux=
compiler.SDL3_cflags.windows=

compiler.SDL3_libs = -L/opt/homebrew/lib -L/usr/local/lib -lSDL3
#-lSDL3_ttf
# compiler.SDL3_libs.macosx =
# compiler.SDL3_libs.linux  =
# compiler.SDL3_libs.windows=

compiler.c.cmd=gcc
compiler.c.std=c17
compiler.c.flags.macosx= -c -Wall -std={compiler.c.std} {compiler.klst_define}
# compiler.c.flags.macosx= -c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.klst_define}
compiler.c.flags.linux= -c -g -MMD -Wall -flto -std={compiler.c.std} {compiler.klst_define}
compiler.c.flags.windows=
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {includes} {compiler.SDL3_cflags} {compiler.umgebung_flags} "{source_file}" -o "{object_file}"

compiler.cpp.cmd=g++
compiler.cpp.std=c++17
compiler.cpp.flags.macosx= -c -Wall -std={compiler.cpp.std} -pthread {compiler.klst_define}
# compiler.cpp.flags.macosx= -c -g -MMD -Wall -flto -std={compiler.cpp.std} -pthread {compiler.klst_define}
compiler.cpp.flags.linux=  -c -g -MMD -Wall -flto -std={compiler.cpp.std} -Wno-long-long -pthread {compiler.klst_define}
compiler.cpp.flags.windows=
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {includes} {compiler.SDL3_cflags} {compiler.umgebung_flags} "{source_file}" -o "{object_file}"

###################################################################################################
#
# ARCHIVE
#
###################################################################################################

compiler.ar.cmd=ar
compiler.ar.flags=-rcs
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

###################################################################################################
#
# COMBINE/LINK
#
###################################################################################################

compiler.c.linker.cmd=g++
compiler.ldflags=-v
# recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" "{build.path}/{archive_file}" {compiler.SDL3_libs} {compiler.umgebung_libs} -o "{build.path}/{build.project_name}.exec" {object_files} {compiler.ldflags} "{archive_file_path}" "-L{build.path}" -lm
# recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.ldflags} -o "{build.path}/{build.project_name}.exec"  {object_files} {compiler.SDL3_libs} {compiler.umgebung_libs}  "{archive_file_path}" "-L{build.path}" -lm
# recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.ldflags} -o "{build.path}/{build.project_name}.exec" {object_files} {archive_file_path} {compiler.umgebung_libs} {compiler.SDL3_libs} -lm
# recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.ldflags} -o "{build.path}/{build.project_name}.exec" {object_files} -Wl,--whole-archive {archive_file_path} -Wl,--no-whole-archive {compiler.umgebung_libs} {compiler.SDL3_libs} -lm
recipe.c.combine.pattern="{compiler.path}{compiler.c.linker.cmd}" {compiler.ldflags} -o "{build.path}/{build.project_name}.exec" {object_files} {archive_file_path} {compiler.umgebung_libs} {compiler.SDL3_libs} -lm

# copy run script to `/tmp/` ( or similar )
# compiler.execpath=sketch-exec
# compiler.copy.macosx={compiler.execpath}/copy-sketch-exec.macos.sh
# compiler.copy.linux={compiler.execpath}/copy-sketch-exec.linux.sh
# compiler.copy.windows=
# compiler.exec.macosx={compiler.execpath}/sketch-exec.sh
# compiler.exec.linux={compiler.execpath}/sketch-exec.sh
# compiler.exec.windows=
#recipe.hooks.linking.postlink.1.pattern="{build.core.path}/../../{compiler.copy}" "{build.core.path}/../../{compiler.exec}"

###################################################################################################
#
# PREPROCESS
#
###################################################################################################

preproc.includes.cmd.macosx=g++
preproc.includes.cmd.linux=g++
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes="{compiler.path}{preproc.includes.cmd}" {compiler.cpp.flags} {preproc.includes.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL3_cflags} {compiler.umgebung_flags} "{source_file}"

preproc.macros.cmd.macosx=g++
preproc.macros.cmd.linux=g++
preproc.macros.flags=-w -x c++ -E -CC
recipe.preproc.macros="{compiler.path}{preproc.macros.cmd}" {compiler.cpp.flags} {preproc.macros.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} {compiler.SDL3_cflags} {compiler.umgebung_flags} "{source_file}" -o "{preprocessed_file_path}"

###################################################################################################
#
# UPLOAD
#
###################################################################################################

# run sketch via script ( this prevents the sketch from being shut down by Arduino )
# tools.sdlexecprog.exec.macosx={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.linux={build.path}/sketch-exec.sh
# tools.sdlexecprog.exec.windows=
# TODO problem with dialog box quitting 
# cannot use the upload script when also using the dialog box with e.g `Card.begin()`
tools.sdlexecprog.upload.pattern="{build.path}/{build.project_name}.exec" {upload.options} --fontpath={runtime.platform.path}/fonts/
tools.sdlexecprog.upload.params.verbose=
tools.sdlexecprog.upload.params.quiet=

recipe.hooks.postbuild.01.pattern=printf "\n\nexecutable binary located at: {build.path}/{build.project_name}.exec \n\n"
# recipe.hooks.postbuild.02.pattern={build.path}/{build.project_name}.exec

###################################################################################################
#
# CLI
#
###################################################################################################

# sketches can also be compiled and run from CLI e.g:
# 
# arduino-cli compile -v -b    klangstrom:emulator:KLST_EMU:board=KLST_PANDA MY_SKETCH
# arduino-cli upload -b        klangstrom:emulator:KLST_EMU:board=KLST_PANDA MY_SKETCH
# arduino-cli compile -u -v -b klangstrom:emulator:KLST_EMU:board=KLST_CATERPILLAR MY_SKETCH # compile+upload
